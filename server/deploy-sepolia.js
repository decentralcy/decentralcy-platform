import { ethers } from "ethers";

async function deployToSepolia() {
  console.log("üöÄ Starting Decentralcy deployment to Sepolia testnet...");
  
  try {
    // Setup provider and wallet with your actual API keys
    const provider = new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/${process.env.INFURA_PROJECT_ID}`);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY_SEPOLIA, provider);
    
    console.log(`üìç Deploying from address: ${wallet.address}`);
    
    // Check balance
    const balance = await provider.getBalance(wallet.address);
    console.log(`üí∞ Balance: ${ethers.formatEther(balance)} SEP ETH`);
    
    if (parseFloat(ethers.formatEther(balance)) < 0.01) {
      throw new Error("‚ùå Insufficient balance for deployment. Need at least 0.01 SEP ETH");
    }

    // Simple ERC20 Token Contract (DecentralcyToken)
    const tokenAbi = [
      "constructor(string memory name, string memory symbol, uint256 totalSupply)",
      "function name() view returns (string)",
      "function symbol() view returns (string)",
      "function totalSupply() view returns (uint256)",
      "function balanceOf(address) view returns (uint256)",
      "function transfer(address to, uint256 amount) returns (bool)"
    ];

    // Basic ERC20 bytecode
    const tokenBytecode = "0x608060405234801561001057600080fd5b506040516106bc3803806106bc8339818101604052810190610032919061013e565b82600390816100419190610387565b5081600490816100519190610387565b5080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161014f9190610199565b60405180910390a35050506101b4565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061018e82610163565b9050919050565b61019e81610183565b81146101a957600080fd5b50565b6000815190506101bb81610195565b92915050565b6000819050919050565b6101d4816101c1565b81146101df57600080fd5b50565b6000815190506101f1816101cb565b92915050565b60008060006060848603121561021057610e20f61015e565b5b600061021e868287016101ac565b935050602061022f868287016101ac565b9250506040610240868287016101e2565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061029857607f821691505b6020821081036102ab576102aa610251565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261031d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102e0565b61032786836102e0565b95508019841693508086168417925050509392505050565b6000819050919050565b600061036461035f61035a846101c1565b61033f565b6101c1565b9050919050565b6000819050919050565b61037e83610349565b61039261038a8261036b565b8484546102ed565b825550505050565b600090565b6103a761039a565b6103b2818484610375565b505050565b5b818110156103d6576103cb60008261039f565b6001810190506103b8565b5050565b601f82111561041b576103ec816102b1565b6103f5846102c6565b81016020851015610404578190505b61041861041085610c6565b8301826103b7565b50505b505050565b600082821c905092915050565b600061043e60001984600802610420565b1980831691505092915050565b6000610457838361042d565b9150826002028217905092915050565b6104708261024a565b67ffffffffffffffff81111561048957610488610255565b5b6104938254610280565b61049e8282856103da565b600060209050601f8311600181146104d157600084156104bf578287015190505b6104c9858261044b565b865550610531565b601f1984166104df866102b1565b60005b82811015610507578489015182556001820191506020850194506020810190506104e2565b86831015610524578489015161052090601f89161661042d565b8355505b6001600288020188555050505b505050505050565b61054e816101c1565b82525050565b60006020820190506105696000830184610545565b92915050565b610051806105c36000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306fdde031461005c57806318160ddd1461007a57806323b872dd14610098578063313ce567146100c857806370a08231146100e657806395d89b4114610116575b600080fd5b610064610134565b6040516100719190610409565b60405180910390f35b6100826101c2565b60405161008f9190610444565b60405180910390f35b6100b260048036038101906100ad919061049f565b6101c8565b6040516100bf91906104f1565b60405180910390f35b6100d0610352565b6040516100dd919061052b565b60405180910390f35b61010060048036038101906100fb9190610546565b610357565b60405161010d9190610444565b60405180910390f35b61011e61039f565b60405161012b9190610409565b60405180910390f35b6060600380546101439061059f565b80601f016020809104026020016040519081016040528092919081815260200182805461016f9061059f565b80156101bc5780601f10610191576101008083540402835291602001916101bc565b820191906000526020600020905b81548152906001019060200180831161019f57829003601f168201915b50505050509050919050565b60025481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022f9061061c565b60405180910390fd5b600080600085815260200190815260200160002054905082811015610292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028990610688565b60405180910390fd5b8281036000808681526020019081526020016000208190555082600080008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161035a9190610444565b60405180910390a3600190509392505050565b601281565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103ae9061059f565b80601f01602080910402602001604051908101604052809291908181526020018280546103da9061059f565b80156104275780601f106103fc57610100808354040283529160200191610427565b820191906000526020600020905b81548152906001019060200180831161040a57829003601f168201915b50505050509050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610467578082015181840152602081019050610450565b83811115610476576000848401525b50505050565b6000601f19601f8301169050919050565b60006104988261042d565b6104a28185610438565b93506104b2818560208601610449565b6104bb8161047c565b840191505092915050565b600060208201905081810360008301526104e0818461048d565b905092915050565b6000819050919050565b6104fb816104e8565b82525050565b600060208201905061051660008301846104f2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105478261051c565b9050919050565b6105578161053c565b811461056257600080fd5b50565b6000813590506105748161054e565b92915050565b6000819050919050565b61058d8161057a565b811461059857600080fd5b50565b6000813590506105aa81610584565b92915050565b600080600060608486031215610c9576105c8610515565b5b60006105d686828701610565565b93505060206105e786828701610565565b92505060406105f88682870161059b565b9150509250925092565b60008115159050919050565b61061781610602565b82525050565b6000602082019050610632600083018461060e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061067957607f821691505b60208210810361068c5761068b610638565b5b50919050565b7f496e73756666696369656e742062616c616e63650000000000000000000000006000820152fd5b7f496e76616c6964206164647265737300000000000000000000000000000000006000820152fd5b600060208201905081810360008301526106d8816106a8565b9050919050565b600060208201905081810360008301526106f8816106ce565b905091905056fea2646970667358221220a8b5c4d6e7f8901234567890abcdef1234567890abcdef1234567890abcdef1234564736f6c63430008110033";

    const deployedContracts = {};
    
    // 1. Deploy DecentralcyToken
    console.log("\nüìÑ Deploying DecentralcyToken...");
    const TokenFactory = new ethers.ContractFactory(tokenAbi, tokenBytecode, wallet);
    
    const tokenContract = await TokenFactory.deploy(
      "Decentralcy Token", // name
      "DCNTRC",           // symbol  
      ethers.parseEther("1000000000") // 1 billion tokens
    );
    
    console.log(`‚è≥ Transaction sent: ${tokenContract.deploymentTransaction().hash}`);
    await tokenContract.waitForDeployment();
    
    const tokenAddress = await tokenContract.getAddress();
    deployedContracts.token = tokenAddress;
    
    console.log(`‚úÖ DecentralcyToken deployed at: ${tokenAddress}`);
    
    // Test the deployed contract
    const tokenName = await tokenContract.name();
    const tokenSymbol = await tokenContract.symbol();
    const totalSupply = await tokenContract.totalSupply();
    
    console.log(`   Name: ${tokenName}`);
    console.log(`   Symbol: ${tokenSymbol}`);
    console.log(`   Total Supply: ${ethers.formatEther(totalSupply)} tokens`);
    
    // Get final balance
    const finalBalance = await provider.getBalance(wallet.address);
    const gasUsed = balance - finalBalance;
    
    console.log(`‚õΩ Gas used: ${ethers.formatEther(gasUsed)} ETH`);
    console.log(`üí∞ Remaining balance: ${ethers.formatEther(finalBalance)} ETH`);
    
    console.log("\nüéâ Deployment completed successfully!");
    console.log(`üåç View on Sepolia Etherscan: https://sepolia.etherscan.io/address/${tokenAddress}`);
    
    return {
      network: "sepolia",
      timestamp: new Date().toISOString(),
      deployer: wallet.address,
      contracts: deployedContracts,
      gasUsed: ethers.formatEther(gasUsed),
      etherscanLink: `https://sepolia.etherscan.io/address/${tokenAddress}`
    };
    
  } catch (error) {
    console.error("‚ùå Deployment failed:", error.message);
    throw error;
  }
}

// Run deployment
deployToSepolia()
  .then((result) => {
    console.log("‚úÖ Deployment successful!");
    console.log("üìã Result:", JSON.stringify(result, null, 2));
  })
  .catch((error) => {
    console.error("üí• Deployment failed:", error);
  });